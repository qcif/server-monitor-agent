import json
import subprocess

examples = [
    subprocess.CompletedProcess(
        args=["timedatectl", "show"],
        returncode=0,
        stdout="\n".join(
            [
                "Timezone=Australia/Brisbane",
                "LocalRTC=no",
                "CanNTP=yes",
                "NTP=no",
                "NTPSynchronized=no",
                "TimeUSec=Mon 2022-07-04 20:36:56 AEST",
                "RTCTimeUSec=Mon 2022-07-04 20:36:55 AEST",
                "",
            ]
        ),
        stderr="",
    ),
    subprocess.CompletedProcess(
        args=[
            "findmnt",
            "--json",
            "--list",
            "--noheadings",
            "--ascii",
            "--notruncate",
            "--bytes",
            "--real",
            "--types=notmpfs,sysfs,cgroup,cgroup2,securityfs,tracefs",
            "--canonicalize",
            "--output=TARGET,SOURCE,SIZE,FSTYPE,UUID,OPTIONS,LABEL",
            "--kernel",
        ],
        returncode=0,
        stdout=json.dumps(
            {
                "filesystems": [
                    {
                        "target": "/",
                        "source": "/dev/sda3",
                        "size": 132161630208,
                        "fstype": "ext4",
                        "uuid": "181d63cf-913b-4f0e-a279-6aeb32aa70a1",
                        "options": "rw,relatime,errors=remount-ro",
                        "label": None,
                    },
                    {
                        "target": "/boot",
                        "source": "/dev/sda1",
                        "size": 477126656,
                        "fstype": "ext4",
                        "uuid": "8f35c970-007e-45bd-991f-9001c86d9ce9",
                        "options": "rw,relatime",
                        "label": None,
                    },
                ]
            }
        ),
        stderr="",
    ),
    subprocess.CompletedProcess(
        args=[
            "findmnt",
            "--json",
            "--list",
            "--noheadings",
            "--ascii",
            "--notruncate",
            "--bytes",
            "--real",
            "--types=notmpfs,sysfs,cgroup,cgroup2,securityfs,tracefs",
            "--canonicalize",
            "--output=TARGET,SOURCE,SIZE,FSTYPE,UUID,OPTIONS,LABEL",
            "--fstab",
        ],
        returncode=0,
        stdout=json.dumps(
            {
                "filesystems": [
                    {
                        "target": "/",
                        "source": "UUID=181d63cf-913b-4f0e-a279-6aeb32aa70a1",
                        "size": 132161630208,
                        "fstype": "ext4",
                        "uuid": "181d63cf-913b-4f0e-a279-6aeb32aa70a1",
                        "options": "errors=remount-ro",
                        "label": None,
                    },
                    {
                        "target": "/boot",
                        "source": "UUID=8f35c970-007e-45bd-991f-9001c86d9ce9",
                        "size": 477126656,
                        "fstype": "ext4",
                        "uuid": "8f35c970-007e-45bd-991f-9001c86d9ce9",
                        "options": "defaults",
                        "label": None,
                    },
                    {
                        "target": "none",
                        "source": "UUID=e011b6ca-ae8c-46d4-b36c-2503c81a4c0d",
                        "size": None,
                        "fstype": "swap",
                        "uuid": "e011b6ca-ae8c-46d4-b36c-2503c81a4c0d",
                        "options": "sw",
                        "label": None,
                    },
                ]
            }
        ),
        stderr="",
    ),
    subprocess.CompletedProcess(
        args=[
            "findmnt",
            "--json",
            "--list",
            "--noheadings",
            "--ascii",
            "--notruncate",
            "--bytes",
            "--real",
            "--types=notmpfs,sysfs,cgroup,cgroup2,securityfs,tracefs",
            "--canonicalize",
            "--output=TARGET,SOURCE,SIZE,FSTYPE,UUID,OPTIONS,LABEL",
            "--mtab",
        ],
        returncode=0,
        stdout=json.dumps(
            {
                "filesystems": [
                    {
                        "target": "/",
                        "source": "/dev/sda3",
                        "size": 132161630208,
                        "fstype": "ext4",
                        "uuid": "181d63cf-913b-4f0e-a279-6aeb32aa70a1",
                        "options": "rw,relatime,errors=remount-ro",
                        "label": None,
                    },
                    {
                        "target": "/boot",
                        "source": "/dev/sda1",
                        "size": 477126656,
                        "fstype": "ext4",
                        "uuid": "8f35c970-007e-45bd-991f-9001c86d9ce9",
                        "options": "rw,relatime",
                        "label": None,
                    },
                ]
            }
        ),
        stderr="",
    ),
    subprocess.CompletedProcess(
        args=[
            "docker",
            "inspect",
            "--format",
            '{"ID":"{{ .Id }}", "Inspect": {{json .State }}, "Name":"{{ .Name }}"}',
            "consul",
        ],
        returncode=0,
        stdout=json.dumps(
            {
                "ID": "787c6c570811a019eba3e8563b63c7d2e7ee3631b1481ca8138c6025628889fd",
                "Inspect": {
                    "Dead": False,
                    "Error": "",
                    "ExitCode": 0,
                    "FinishedAt": "2022-08-15T13:45:10.681921893Z",
                    "OOMKilled": False,
                    "Paused": False,
                    "Pid": 4982,
                    "Restarting": False,
                    "Running": True,
                    "StartedAt": "2022-08-16T08:23:06.343063666Z",
                    "Status": "running",
                },
                "Name": "/consul",
            }
        ),
        stderr="",
    ),
    subprocess.CompletedProcess(
        args=["systemctl", "show", "docker.service", "--all"],
        returncode=0,
        stdout="\n".join(
            [
                "Type=notify",
                "Restart=always",
                "PIDFile=",
                "NotifyAccess=main",
                "RestartUSec=2s",
                "TimeoutStartUSec=infinity",
                "TimeoutStopUSec=infinity",
                "TimeoutAbortUSec=infinity",
                "RuntimeMaxUSec=infinity",
                "WatchdogUSec=0",
                "WatchdogTimestamp=",
                "WatchdogTimestampMonotonic=0",
                "RootDirectoryStartOnly=no",
                "RemainAfterExit=no",
                "GuessMainPID=yes",
                "RestartPreventExitStatus=",
                "RestartForceExitStatus=",
                "SuccessExitStatus=",
                "MainPID=730",
                "ControlPID=0",
                "BusName=",
                "FileDescriptorStoreMax=0",
                "NFileDescriptorStore=0",
                "StatusText=",
                "StatusErrno=0",
                "Result=success",
                "ReloadResult=success",
                "CleanResult=success",
                "USBFunctionDescriptors=",
                "USBFunctionStrings=",
                "UID=[not set]",
                "GID=[not set]",
                "NRestarts=0",
                "OOMPolicy=continue",
                "ExecMainStartTimestamp=Tue 2022-08-16 18:19:39 AEST",
                "ExecMainStartTimestampMonotonic=6746809",
                "ExecMainExitTimestamp=",
                "ExecMainExitTimestampMonotonic=0",
                "ExecMainPID=730",
                "ExecMainCode=0",
                "ExecMainStatus=0",
                "ExecStart={ path=/usr/bin/dockerd ; argv[]=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock ; ignore_errors=no ; start_time=[Tue 2022-08-16 18:19:39 AEST] ; stop_time=[n/a] ; pid=730 ; code=(null) ; status=0/0 }",
                "ExecStartEx={ path=/usr/bin/dockerd ; argv[]=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock ; flags= ; start_time=[Tue 2022-08-16 18:19:39 AEST] ; stop_time=[n/a] ; pid=730 ; code=(null) ; status=0/0 }",
                "ExecReload={ path=/bin/kill ; argv[]=/bin/kill -s HUP $MAINPID ; ignore_errors=no ; start_time=[n/a] ; stop_time=[n/a] ; pid=0 ; code=(null) ; status=0/0 }",
                "ExecReloadEx={ path=/bin/kill ; argv[]=/bin/kill -s HUP $MAINPID ; flags= ; start_time=[n/a] ; stop_time=[n/a] ; pid=0 ; code=(null) ; status=0/0 }",
                "Slice=system.slice",
                "ControlGroup=/system.slice/docker.service",
                "MemoryCurrent=78606336",
                "CPUUsageNSec=[not set]",
                "EffectiveCPUs=",
                "EffectiveMemoryNodes=",
                "TasksCurrent=66",
                "IPIngressBytes=[no data]",
                "IPIngressPackets=[no data]",
                "IPEgressBytes=[no data]",
                "IPEgressPackets=[no data]",
                "IOReadBytes=18446744073709551615",
                "IOReadOperations=18446744073709551615",
                "IOWriteBytes=18446744073709551615",
                "IOWriteOperations=18446744073709551615",
                "Delegate=yes",
                "DelegateControllers=cpu cpuacct cpuset io blkio memory devices pids bpf-firewall bpf-devices",
                "CPUAccounting=no",
                "CPUWeight=[not set]",
                "StartupCPUWeight=[not set]",
                "CPUShares=[not set]",
                "StartupCPUShares=[not set]",
                "CPUQuotaPerSecUSec=infinity",
                "CPUQuotaPeriodUSec=infinity",
                "AllowedCPUs=",
                "AllowedMemoryNodes=",
                "IOAccounting=no",
                "IOWeight=[not set]",
                "StartupIOWeight=[not set]",
                "BlockIOAccounting=no",
                "BlockIOWeight=[not set]",
                "StartupBlockIOWeight=[not set]",
                "MemoryAccounting=yes",
                "DefaultMemoryLow=0",
                "DefaultMemoryMin=0",
                "MemoryMin=0",
                "MemoryLow=0",
                "MemoryHigh=infinity",
                "MemoryMax=infinity",
                "MemorySwapMax=infinity",
                "MemoryLimit=infinity",
                "DevicePolicy=auto",
                "TasksAccounting=yes",
                "TasksMax=infinity",
                "IPAccounting=no",
                "IPAddressAllow=",
                "IPAddressDeny=",
                "IPIngressFilterPath=",
                "IPEgressFilterPath=",
                "DisableControllers=",
                "Environment=",
                "PassEnvironment=",
                "UnsetEnvironment=",
                "UMask=0022",
                "LimitCPU=infinity",
                "LimitCPUSoft=infinity",
                "LimitFSIZE=infinity",
                "LimitFSIZESoft=infinity",
                "LimitDATA=infinity",
                "LimitDATASoft=infinity",
                "LimitSTACK=infinity",
                "LimitSTACKSoft=8388608",
                "LimitCORE=infinity",
                "LimitCORESoft=infinity",
                "LimitRSS=infinity",
                "LimitRSSSoft=infinity",
                "LimitNOFILE=infinity",
                "LimitNOFILESoft=infinity",
                "LimitAS=infinity",
                "LimitASSoft=infinity",
                "LimitNPROC=infinity",
                "LimitNPROCSoft=infinity",
                "LimitMEMLOCK=65536",
                "LimitMEMLOCKSoft=65536",
                "LimitLOCKS=infinity",
                "LimitLOCKSSoft=infinity",
                "LimitSIGPENDING=3554",
                "LimitSIGPENDINGSoft=3554",
                "LimitMSGQUEUE=819200",
                "LimitMSGQUEUESoft=819200",
                "LimitNICE=0",
                "LimitNICESoft=0",
                "LimitRTPRIO=0",
                "LimitRTPRIOSoft=0",
                "LimitRTTIME=infinity",
                "LimitRTTIMESoft=infinity",
                "WorkingDirectory=",
                "RootDirectory=",
                "RootImage=",
                "OOMScoreAdjust=-500",
                "Nice=0",
                "IOSchedulingClass=0",
                "IOSchedulingPriority=0",
                "CPUSchedulingPolicy=0",
                "CPUSchedulingPriority=0",
                "CPUAffinity=",
                "CPUAffinityFromNUMA=no",
                "NUMAPolicy=n/a",
                "NUMAMask=",
                "TimerSlackNSec=50000",
                "CPUSchedulingResetOnFork=no",
                "NonBlocking=no",
                "StandardInput=null",
                "StandardInputFileDescriptorName=",
                "StandardInputData=",
                "StandardOutput=journal",
                "StandardOutputFileDescriptorName=",
                "StandardError=inherit",
                "StandardErrorFileDescriptorName=",
                "TTYPath=",
                "TTYReset=no",
                "TTYVHangup=no",
                "TTYVTDisallocate=no",
                "SyslogPriority=30",
                "SyslogIdentifier=",
                "SyslogLevelPrefix=yes",
                "SyslogLevel=6",
                "SyslogFacility=3",
                "LogLevelMax=-1",
                "LogRateLimitIntervalUSec=0",
                "LogRateLimitBurst=0",
                "LogExtraFields=",
                "LogNamespace=",
                "SecureBits=0",
                "CapabilityBoundingSet=cap_chown cap_dac_override cap_dac_read_search cap_fowner cap_fsetid cap_kill cap_setgid cap_setuid cap_setpcap cap_linux_immutable cap_net_bind_service cap_net_broadcast cap_net_admin cap_net_raw cap_ipc_lock cap_ipc_owner cap_sys_module cap_sys_rawio cap_sys_chroot cap_sys_ptrace cap_sys_pacct cap_sys_admin cap_sys_boot cap_sys_nice cap_sys_resource cap_sys_time cap_sys_tty_config cap_mknod cap_lease cap_audit_write cap_audit_control cap_setfcap cap_mac_override cap_mac_admin cap_syslog cap_wake_alarm cap_block_suspend cap_audit_read",
                "AmbientCapabilities=",
                "User=",
                "Group=",
                "DynamicUser=no",
                "RemoveIPC=no",
                "SupplementaryGroups=",
                "PAMName=",
                "ReadWritePaths=",
                "ReadOnlyPaths=",
                "InaccessiblePaths=",
                "MountFlags=",
                "PrivateTmp=no",
                "PrivateDevices=no",
                "ProtectKernelTunables=no",
                "ProtectKernelModules=no",
                "ProtectKernelLogs=no",
                "ProtectControlGroups=no",
                "PrivateNetwork=no",
                "PrivateUsers=no",
                "PrivateMounts=no",
                "ProtectHome=no",
                "ProtectSystem=no",
                "SameProcessGroup=no",
                "UtmpIdentifier=",
                "UtmpMode=init",
                "SELinuxContext=",
                "AppArmorProfile=",
                "SmackProcessLabel=",
                "IgnoreSIGPIPE=yes",
                "NoNewPrivileges=no",
                "SystemCallFilter=~",
                "SystemCallArchitectures=",
                "SystemCallErrorNumber=0",
                "Personality=",
                "LockPersonality=no",
                "RestrictAddressFamilies=~",
                "RuntimeDirectoryPreserve=no",
                "RuntimeDirectoryMode=0755",
                "RuntimeDirectory=",
                "StateDirectoryMode=0755",
                "StateDirectory=",
                "CacheDirectoryMode=0755",
                "CacheDirectory=",
                "LogsDirectoryMode=0755",
                "LogsDirectory=",
                "ConfigurationDirectoryMode=0755",
                "ConfigurationDirectory=",
                "TimeoutCleanUSec=infinity",
                "MemoryDenyWriteExecute=no",
                "RestrictRealtime=no",
                "RestrictSUIDSGID=no",
                "RestrictNamespaces=no",
                "BindPaths=",
                "BindReadOnlyPaths=",
                "TemporaryFileSystem=",
                "MountAPIVFS=no",
                "KeyringMode=private",
                "ProtectHostname=no",
                "NetworkNamespacePath=",
                "KillMode=process",
                "KillSignal=15",
                "RestartKillSignal=15",
                "FinalKillSignal=9",
                "SendSIGKILL=yes",
                "SendSIGHUP=no",
                "WatchdogSignal=6",
                "Id=docker.service",
                "Names=docker.service",
                "Following=",
                "Requires=docker.socket system.slice containerd.service sysinit.target",
                "Requisite=",
                "Wants=network-online.target",
                "BindsTo=",
                "PartOf=",
                "RequiredBy=",
                "RequisiteOf=",
                "WantedBy=multi-user.target",
                "BoundBy=",
                "ConsistsOf=",
                "Conflicts=shutdown.target",
                "ConflictedBy=",
                "Before=multi-user.target shutdown.target",
                "After=sysinit.target containerd.service network-online.target docker.socket basic.target system.slice systemd-journald.socket firewalld.service",
                "OnFailure=",
                "Triggers=",
                "TriggeredBy=docker.socket",
                "PropagatesReloadTo=",
                "ReloadPropagatedFrom=",
                "JoinsNamespaceOf=",
                "RequiresMountsFor=",
                "Documentation=https://docs.docker.com",
                "Description=Docker Application Container Engine",
                "LoadState=loaded",
                "ActiveState=active",
                "SubState=running",
                "FragmentPath=/lib/systemd/system/docker.service",
                "SourcePath=",
                "DropInPaths=",
                "UnitFileState=enabled",
                "UnitFilePreset=enabled",
                "StateChangeTimestamp=Tue 2022-08-16 18:19:40 AEST",
                "StateChangeTimestampMonotonic=8277733",
                "InactiveExitTimestamp=Tue 2022-08-16 18:19:39 AEST",
                "InactiveExitTimestampMonotonic=6746968",
                "ActiveEnterTimestamp=Tue 2022-08-16 18:19:40 AEST",
                "ActiveEnterTimestampMonotonic=8277733",
                "ActiveExitTimestamp=",
                "ActiveExitTimestampMonotonic=0",
                "InactiveEnterTimestamp=",
                "InactiveEnterTimestampMonotonic=0",
                "CanStart=yes",
                "CanStop=yes",
                "CanReload=yes",
                "CanIsolate=no",
                "CanClean=",
                "Job=",
                "StopWhenUnneeded=no",
                "RefuseManualStart=no",
                "RefuseManualStop=no",
                "AllowIsolate=no",
                "DefaultDependencies=yes",
                "OnFailureJobMode=replace",
                "IgnoreOnIsolate=no",
                "NeedDaemonReload=no",
                "JobTimeoutUSec=infinity",
                "JobRunningTimeoutUSec=infinity",
                "JobTimeoutAction=none",
                "JobTimeoutRebootArgument=",
                "ConditionResult=yes",
                "AssertResult=yes",
                "ConditionTimestamp=Tue 2022-08-16 18:19:39 AEST",
                "ConditionTimestampMonotonic=6746130",
                "AssertTimestamp=Tue 2022-08-16 18:19:39 AEST",
                "AssertTimestampMonotonic=6746130",
                "Conditions=[unprintable]",
                "Asserts=[unprintable]",
                "LoadError=",
                "Transient=no",
                "Perpetual=no",
                "StartLimitIntervalUSec=1min",
                "StartLimitBurst=3",
                "StartLimitAction=none",
                "FailureAction=none",
                "FailureActionExitStatus=[not set]",
                "SuccessAction=none",
                "SuccessActionExitStatus=[not set]",
                "RebootArgument=",
                "InvocationID=52f3b50b98d14661859d1d0af8ab5602",
                "CollectMode=inactive",
                "Refs=",
            ]
        ),
        stderr="",
    ),
]
