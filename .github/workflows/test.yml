name: Test Python package

on:
  push:
    branches: [ "main", "develop"]
  pull_request:
    branches: [ "develop" ]

env:
  PIPENV_VERBOSITY: -1

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [ "3.9", "3.10" ]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install pipenv
        run: pipx install pipenv

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}
          cache: pipenv

      - name: Install dependencies
        run: |
          pipenv install --dev

      - name: Run tests
        run: |
          pipenv run coverage run -m pytest --doctest-modules --junitxml=junit/test-results-${{ matrix.python-version }}.xml
          pipenv run coverage report

      - name: Upload pytest test results
        uses: actions/upload-artifact@v3
        with:
          name: pytest-results-${{ matrix.python-version }}
          path: junit/test-results-${{ matrix.python-version }}.xml
        # Use always() to always run this step to publish test results when there are test failures
        if: ${{ always() }}

      - name: Run linters
        run: |
          pipenv run flake8 . --count --show-source --statistics
          pipenv run black --check .
          pipenv run mypy src
          pipenv run pylint src
          pipenv run pydocstyle src
